<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UE5 on 何律师</title><link>https://hebohang.github.io/categories/ue5/</link><description>Recent content in UE5 on 何律师</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>hebohang</copyright><lastBuildDate>Thu, 08 Feb 2024 14:39:49 +0800</lastBuildDate><atom:link href="https://hebohang.github.io/categories/ue5/index.xml" rel="self" type="application/rss+xml"/><item><title>WorldPartition解析</title><link>https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/</link><pubDate>Thu, 08 Feb 2024 14:39:49 +0800</pubDate><guid>https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/</guid><description>&lt;h2 id="概览">概览&lt;/h2>
&lt;p>在 UE5 推出了服务于大世界的 World Partition 系统，总的来说主要分几大块：&lt;/p>
&lt;ol>
&lt;li>Grid、Level（Grid Level，非 ULevel）、Cell 的划分&lt;/li>
&lt;li>OFPA&lt;/li>
&lt;li>Level Instance&lt;/li>
&lt;li>Data Layer&lt;/li>
&lt;li>HLOD&lt;/li>
&lt;/ol>
&lt;p>还有一些也与之相关，例如之前研究过的 LandscapeSpline 也在 WP 版本有特殊的实现方式。&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/world-partition-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/world-partition-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>以下代码均为 5.3 版本对应代码。&lt;/p>
&lt;h2 id="gridlevelcell-的划分">Grid、Level、Cell 的划分&lt;/h2>
&lt;h3 id="wp-与-uworldulevel-的串连">WP 与 UWorld、ULevel 的串连&lt;/h3>
&lt;p>我们知道，UE中，一个 UWorld 由各个 ULevel 组织而成，每个 ULevel 则拥有一个对应的设置信息记录 AWorldSettings：
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/22924838" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/22924838&lt;/a>&lt;/p>
&lt;p>AWorldSettings 对应编辑器中的 World Settings 面板，也是保存 UWorldPartition 的容器：
&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image.png"
width="709"
height="365"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="466px"
>&lt;/p>
&lt;p>这里使用的是 UE5 新增的 TObjectPtr，方便序列化反序列化，可参考：
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/504115127" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/504115127&lt;/a>&lt;/p>
&lt;p>我们在编辑器新打开一个 World Partition 地图的时候（File-&amp;gt;New Level-&amp;gt;Open World），会调用 &lt;code>FEditorFileUtils::LoadMap(*MapPackageFilename, /*bLoadAsTemplate=*/true);&lt;/code>
去加载一个大世界模板地图，接着加载 AWorldSettings 的时候就会把对应 WorldPartition 随之加载进来。&lt;/p>
&lt;p>当然，既然是 UObject 我们也可以直接 &lt;code>NewObject&amp;lt;UWorldPartition&amp;gt;(WorldSettings);&lt;/code>&lt;/p>
&lt;p>在 UWorld、ULevel 中则均有 GetWorldPartition 方法，实现均是拿到对应 WorldSettings（UWorld 则是拿对应 PersistentLevel 的 WorldSettings）的 WorldPartition：
&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-1.png"
width="922"
height="367"
loading="lazy"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="602px"
>&lt;/p>
&lt;p>对于 UWorld 我们也有 IsPartitionedWorld 方法来判断是否是 WP 版本：
&lt;code>bool IsPartitionedWorld() const { return GetWorldPartition() != nullptr; }&lt;/code>&lt;/p>
&lt;p>因此我们可以这样写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Actor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">Actor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetWorld&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IsPartitionedWorld&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="uworldpartition">UWorldPartition&lt;/h3>
&lt;p>既然 WP 是保存在 AWorldSettings 中，编辑器下我们就可以调整对应设置：
&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-2.png"
width="720"
height="939"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="184px"
>&lt;/p>
&lt;p>引擎为其定制了此面板，可参考：Engine\Source\Editor\WorldPartitionEditor\Private\WorldPartition\Customizations\WorldPartitionDetailsCustomization.h&lt;/p>
&lt;p>有几处设置需要细讲，我们先回到 UWorldPartition 这个类，他本身继承自 UObject、FActorDescContainerCollection、IWorldPartitionCookPackageGenerator，
也就是说他本身就存放有所有的 ActorDesc，在 UActorDescContainer 的 ActorsByName 中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">FNameActorDescMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TUniquePtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FWorldPartitionActorDesc&lt;/span>&lt;span class="o">&amp;gt;*&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FNameActorDescMap&lt;/span> &lt;span class="n">ActorsByName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 ActorDesc 即 FWorldPartitionActorDesc 类型十分重要，他保存有 Guid、ActorPackage、ActorPath 等离线信息（即保存在资产中的信息）以及
AActor的指针 ActorPtr、引用计数等运行时信息（即运行游戏才有的信息）。为后续划分所属 Cell（GenerateStreaming）等功能服务。&lt;/p>
&lt;p>我们可以用 &lt;code>wp.Editor.DumpActorDescs hbh_test.csv&lt;/code> 指令把他们都 dump 出来，参数是文件路径。&lt;/p>
&lt;p>接着回到编辑器面板，对应 UWorldPartition 的：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-3.png"
width="1377"
height="376"
loading="lazy"
class="gallery-image"
data-flex-grow="366"
data-flex-basis="878px"
>&lt;/p>
&lt;p>我们的 RuntimeHash 除非特殊需要自己定制，否则都是走默认的 UWorldPartitionRuntimeSpatialHash，在World Settings中可以修改，
那么接下来的 Preview Grids 以及 Grids 与 Debug Color 等设置则都属于 UWorldPartitionRuntimeSpatialHash：
&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-4.png"
width="674"
height="276"
loading="lazy"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="586px"
>&lt;/p>
&lt;p>可以看到他们都被 WITH_EDITORONLY_DATA 包裹，真正运行游戏时，最重要的 Cell Size、Loading Range 等信息会被重新安置给 StreamingGrids：
&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-5.png"
width="698"
height="190"
loading="lazy"
class="gallery-image"
data-flex-grow="367"
data-flex-basis="881px"
>&lt;/p>
&lt;p>而这一过程则是在最重要的 GenerateStreaming 函数中完成的：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-6.png"
width="1698"
height="407"
loading="lazy"
class="gallery-image"
data-flex-grow="417"
data-flex-basis="1001px"
>&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-7.png"
width="1104"
height="236"
loading="lazy"
class="gallery-image"
data-flex-grow="467"
data-flex-basis="1122px"
>&lt;/p>
&lt;h3 id="gridlevelcell-的基础含义">Grid、Level、Cell 的基础含义&lt;/h3>
&lt;p>在进入正式分析之前，再简单说一下这三个的意思。&lt;/p>
&lt;p>Grid 是棋盘，Cell 是格子，Level 则是分层管理。每一级 Level 都有自己的格子，即自己的 Cell Size，每两级 Level 之间的 Cell Size 是乘 2 的关系，
即格子放大四倍（宽、高都乘上了2）。&lt;/p>
&lt;p>Level 0 的 Cell Size 是 WP 面板上填的数值，也是最小的 Cell Size，最大的一级 Level 则会覆盖整个世界，因此我们只需要知道 Level 的
总个数以及面板上自己设定的 Cell Size，就知道了每一级 Level 的 Cell Size，具体函数如下（会在 UWorldPartitionRuntimeSpatialHash 的 GenerateStreaming 函数中调用，后面章节会详细分析）：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-19.png"
width="1067"
height="440"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>一个例子如下：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-20.png"
width="631"
height="181"
loading="lazy"
class="gallery-image"
data-flex-grow="348"
data-flex-basis="836px"
>&lt;/p>
&lt;p>显然为了内存考虑，一个 Level 只会保存含有 Actor 的那些格子，在这个例子中，我们可以看到 Level 0 有 7 个 Cell，Level 4 则有 25 个；一个 Actor 只会被划分到固定一级 Level 的固定一个 Cell 中。&lt;/p>
&lt;h3 id="初始化generatestreaming">初始化：GenerateStreaming&lt;/h3>
&lt;p>这是 WP 最重要的函数之一，在 UWorldPartition::OnBeginPlay 中我们会调用此函数，来完成对所有 Actor 的划分，决定归属于哪一级 Level 的哪一个 Cell 中，以及
哪些 Actor 会打到一个 Cluster 里面（根据引用关系来）。这样划分好后，我们加载的时候，就只需要根据 Loading Range 来判断覆盖了哪些 Cell，然后去 SpatialHash 中拿到
加载对应 Cell 中的 Actor 所在的 Cluster. 例如 A 引用了 B，而此时 A 所处的 Cell 被覆盖，而 B 所处的 Cell 未被覆盖，那么加载 A 时，由于有引用关系，我们也会把 B 给加载出来，
对于 B 所处 Cell 的其他 Actor 则不予理会。&lt;/p>
&lt;p>我们会调用到 UWorldPartition::GenerateContainerStreaming 中，此时分为三步：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Dump state log&lt;/p>
&lt;p>这一步我们会把WP相关信息都dump出来，和指令 &lt;code>wp.Editor.DumpStreamingGenerationLog&lt;/code> 是一样的效果，我们放在后面的 Debug 一节重点讲。当然这一步是做好 dump 的准备工作，在后面的2、3都会执行相关dump操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Preparation Phase&lt;/p>
&lt;p>这一步我们会创建所有的 Container，这里的 Container 即 UActorDescContainer，我们会递归完善所有的 ActorDesc 信息、ActorDescView 信息、Cluster 信息，
打进 Cluster 的相关算法都在 GenerateObjectsClusters 函数中：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-10.png"
width="1853"
height="183"
loading="lazy"
class="gallery-image"
data-flex-grow="1012"
data-flex-basis="2430px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Generate streaming&lt;/p>
&lt;p>这一步首先我们会创建 Streaming 所需的 Policy，然后根据 Policy 去完成 Actor 的划分（归属于哪一级 Level 的哪一个 Cell）。Policy 在代码中写死的为 UWorldPartitionStreamingPolicy。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="actor-的划分--归属于哪一级-level-的哪一个-cell">Actor 的划分 —— 归属于哪一级 Level 的哪一个 Cell&lt;/h4>
&lt;p>我们重点来看最后这步：根据 Policy 去完成 Actor 的划分。我们最终会调用到 UWorldPartitionRuntimeSpatialHash 的 GenerateStreaming 函数（如果是默认的 UWorldPartitionRuntimeSpatialHash 的话）：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-12.png"
width="1623"
height="154"
loading="lazy"
class="gallery-image"
data-flex-grow="1053"
data-flex-basis="2529px"
>&lt;/p>
&lt;p>在进入 UWorldPartitionRuntimeSpatialHash 的 GenerateStreaming 函数之前，我们首先需要看上图圈出来的 GetStreamingGenerationContext 函数，这一步我们会创建出一个 FStreamingGenerationContext，
在里面我们会把 Preparation Phase 创立的 Cluster 给写到 ActorSetInstances 中，具体可看 FStreamingGenerationContext 的构造函数。&lt;/p>
&lt;p>接着进入 UWorldPartitionRuntimeSpatialHash 的 GenerateStreaming 函数，这里我们会根据 Policy 以及刚刚创立的 StreamingGenerationContext 完成最终 Actor 的划分。大体上又分几个步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>提取面板设置的 Grid 信息&lt;/p>
&lt;p>首先是 UWorldPartition 一节所述，会先提取面板设置的 Grid 信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把 ActorSetInstance 写到中间变量 GridActorSetInstances 中&lt;/p>
&lt;p>这一步即包含我们的 Cluster 信息。&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-11.png"
width="1394"
height="266"
loading="lazy"
class="gallery-image"
data-flex-grow="524"
data-flex-basis="1257px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据 WP 面板设置，完成 Actor 的划分&lt;/p>
&lt;p>重点看 RuntimeSpatialHashGridHelper.cpp 中的 GetPartitionedActors 函数，接下来会详细分析。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成最终 FSpatialHashStreamingGrid 的构建&lt;/p>
&lt;p>对应 CreateStreamingGrid 函数。至此初始化完毕。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="getpartitionedactors">GetPartitionedActors&lt;/h4>
&lt;p>在这里我们又会分几步进行：&lt;/p>
&lt;p>3.1. FSquare2DGridHelper&lt;/p>
&lt;p>关键点是这几个配置：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-13.png"
width="485"
height="118"
loading="lazy"
class="gallery-image"
data-flex-grow="411"
data-flex-basis="986px"
>&lt;/p>
&lt;p>这是 5.3 才给出的选项，前两个一般勾选 Disabled ，是为了解决老版本的问题：&lt;/p>
&lt;p>这里保存 Cell 的时候也是仅考虑上面有 Actor 的情形，我们也可以手动调用这个函数来完成一些事情，例如调查有几个 Cell 的小工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UWorldPartition&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">WorldPartition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WorldSettings&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetWorldPartition&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UWorldPartition&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FGenerateStreamingParams&lt;/span> &lt;span class="n">Params&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UWorldPartition&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FGenerateStreamingContext&lt;/span> &lt;span class="n">Context&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WorldPartition&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GenerateStreaming&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Params&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UWorldPartitionRuntimeHash&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">RuntimeHash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">WorldPartition&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">RuntimeHash&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RuntimeHash&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UWorldPartitionRuntimeSpatialHash&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">RuntimeSpatialHash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UWorldPartitionRuntimeSpatialHash&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RuntimeHash&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RuntimeSpatialHash&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">int32&lt;/span> &lt;span class="n">CellNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">int32&lt;/span> &lt;span class="n">TotalActorsCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RuntimeSpatialHash&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ForEachStreamingCells&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">UWorldPartitionRuntimeCell&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">RuntimeCell&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CellNum&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TotalActorsCount&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">RuntimeCell&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetActorCount&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 ForEachStreamingCells 方法返回 false 的时候会直接阻断，只有返回 true 的时候才会继续遍历下一个 Cell。&lt;/p>
&lt;h3 id="运行时level-streaming-的加载">运行时：Level Streaming 的加载&lt;/h3>
&lt;p>我们的加载主要是通过 UWorldPartitionLevelStreamingDynamic 完成，他本身就继承自 ULevelStreamingDynamic：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-14.png"
width="722"
height="53"
loading="lazy"
class="gallery-image"
data-flex-grow="1362"
data-flex-basis="3269px"
>&lt;/p>
&lt;p>我们在运行时会更新 World 中的各个 Subsystem，调用 UpdateStreamingState：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-16.png"
width="1215"
height="388"
loading="lazy"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="751px"
>&lt;/p>
&lt;p>其中和 WP 相关的主要是 UWorldPartitionSubsystem，在他的 UpdateStreamingState 函数中，我们会根据 StreamingPolicy 拿到当前需要加载的 Cell，
再通过 UWorldPartitionStreamingPolicy::SetCellStateToActivated 函数去 Load 这些 Cell：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-17.png"
width="908"
height="227"
loading="lazy"
class="gallery-image"
data-flex-grow="400"
data-flex-basis="960px"
>&lt;/p>
&lt;p>这里每个 Cell 会对应一个 UWorldPartitionLevelStreamingDynamic，&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-18.png"
width="708"
height="61"
loading="lazy"
class="gallery-image"
data-flex-grow="1160"
data-flex-basis="2785px"
>&lt;/p>
&lt;p>因而加载的时候也是最终调用到 UWorldPartitionLevelStreamingDynamic::Activate&lt;/p>
&lt;h2 id="ofpa">OFPA&lt;/h2>
&lt;h3 id="__externalactors__-与-__externalobjects__">&lt;strong>ExternalActors&lt;/strong> 与 &lt;strong>ExternalObjects&lt;/strong>&lt;/h3>
&lt;p>对于 &lt;strong>ExternalObjects&lt;/strong>，他主要保存的是 Outliner 的文件夹对象，对应 UE 的 UActorFolder 类。在构造时会调用 FLevelActorFoldersHelper::AddActorFolder 添加到 ULevel 中，
可以看到对应 ULevel 里面的属性是标记为 &lt;code>UPROPERTY(Transient)&lt;/code> 不保存的：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-30.png"
width="1181"
height="304"
loading="lazy"
class="gallery-image"
data-flex-grow="388"
data-flex-basis="932px"
>&lt;/p>
&lt;p>对于 &lt;strong>ExternalActors&lt;/strong>，他保存的是关卡中的Actor对象，实际上会对Actor调用 SetPackageExternal(true)，最后给 Object 设置上 RF_HasExternalPackage 标记：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-21.png"
width="1215"
height="320"
loading="lazy"
class="gallery-image"
data-flex-grow="379"
data-flex-basis="911px"
>&lt;/p>
&lt;p>而在序列化时，我们保存的是 UPackage，对于标记了 RF_HasExternalPackage 的 Actor，他的 GetPackage 方法最终会得到 ExternalPackage：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-24.png"
width="615"
height="225"
loading="lazy"
class="gallery-image"
data-flex-grow="273"
data-flex-basis="656px"
>&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-23.png"
width="929"
height="241"
loading="lazy"
class="gallery-image"
data-flex-grow="385"
data-flex-basis="925px"
>&lt;/p>
&lt;p>这段代码的逻辑是，我们会不断拿 ExternalPackage，如果 OuterPrivate 非空且标记了 RF_HasExternalPackage，就会拿到一份 ExternalPackage，如果 OuterPrivate 非空但没标记上 RF_HasExternalPackage，拿到的就是 nullptr；
而如果拿到 nullptr，则会继续追踪 Outer（OuterPrivate），直到没有 Outer，表示到达最顶层，从而拿到最顶层 UPackage&lt;/p>
&lt;p>在 FPackagePath 类中有方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">TCHAR&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">FPackagePath&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetExternalActorsFolderName&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;__ExternalActors__&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">TCHAR&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">FPackagePath&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetExternalObjectsFolderName&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;__ExternalObjects__&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="编辑器下actor的加载">编辑器下Actor的加载&lt;/h3>
&lt;p>对于 &lt;strong>ExternalObjects&lt;/strong>，会在 ULevel::PostLoad 中调用 FExternalPackageHelper::LoadObjectsFromExternalPackages 来加载：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-25.png"
width="1016"
height="213"
loading="lazy"
class="gallery-image"
data-flex-grow="476"
data-flex-basis="1144px"
>&lt;/p>
&lt;p>实际上也就是根据 Level 名字拿到对应 __ExternalObjects__ 路径。例如 Content/HbhTest/NewMap.umap 就会拿到 Content/__ExternalObjects__/HbhTest/NewMap 这个路径从而直接加载里头的所有 Package：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-26.png"
width="1215"
height="308"
loading="lazy"
class="gallery-image"
data-flex-grow="394"
data-flex-basis="946px"
>&lt;/p>
&lt;p>对于 &lt;strong>ExternalActors&lt;/strong> 也类似，只是挪到了 ULevel::OnLevelLoaded 里面初始化 WorldPartition 的阶段，最后会调用到 UActorDescContainer::Initialize 来加载所有对应 __ExternalActors__ 路径下的 Actor：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-22.png"
width="1395"
height="546"
loading="lazy"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="613px"
>&lt;/p>
&lt;p>这些 Actor 信息在编辑器情况下最后会被缓存到 WorldPartition 的 EditorHash 中，最后可以根据 XYZ 以及对应 Level 级别得到所有的 Actor：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-27.png"
width="803"
height="137"
loading="lazy"
class="gallery-image"
data-flex-grow="586"
data-flex-basis="1406px"
>&lt;/p>
&lt;h3 id="引用关系">引用关系&lt;/h3>
&lt;p>在前一节中我们说过，加载的时候是根据路径来判断的，Map 对应的资产并不会存有 __ExternalObjects__ 与 __ExternalActors__ 的信息。但是当我们使用 Reference Viewer 进行查看的
时候，会发现大世界 Map 对应的 Dependencies 有所有的 __ExternalActors__，而 Referencers 既有 __ExternalActors__ 又有 __ExternalObjects__&lt;/p>
&lt;p>这是因为 UE 的 Reference Viewer 也对大世界关卡特殊处理了，在打开ue编辑器的时候，他会对所有资产做一个缓存，存到 FAssetRegistryState 的 CachedAssets 中，我们每添加一个依赖，就会对应的
添加上引用：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-29.png"
width="1112"
height="489"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="545px"
>&lt;/p>
&lt;p>因此对于一个大世界 map，实际上是对 __ExternalObjects__ 的这些资产添加上了 map 的依赖，从而让 map 的引用有了 __ExternalObjects__ 里的东西。&lt;/p>
&lt;p>而对于 map 本身的依赖项，ue 会进行特殊处理：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-28.png"
width="1951"
height="678"
loading="lazy"
class="gallery-image"
data-flex-grow="287"
data-flex-basis="690px"
>&lt;/p>
&lt;p>和上一节加载的手法类似，从而让 map 的 dependencies 有了这些 __ExternalActors__&lt;/p>
&lt;h2 id="debug">Debug&lt;/h2>
&lt;h3 id="demp大世界场景信息">Demp大世界场景信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wp.Editor.DumpStreamingGenerationLog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5.3版本可以使用这个命令，输出一次WP的信息（也可以运行一次游戏或者cook的时候），输出结果会在 Saved\Logs\WorldPartition 里。&lt;/p>
&lt;h3 id="grid调试">Grid调试&lt;/h3>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-15.png"
width="1717"
height="774"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/world-partition-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/world-partition-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h3 id="获取ofpa的actor的信息">获取OFPA的Actor的信息&lt;/h3>
&lt;p>右键可以获取对应的本地路径：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-8.png"
width="716"
height="166"
loading="lazy"
class="gallery-image"
data-flex-grow="431"
data-flex-basis="1035px"
>&lt;/p>
&lt;p>想获取guid，我测试下来可以这样做：&lt;/p>
&lt;ol>
&lt;li>视口点击想确定的actor&lt;/li>
&lt;li>切换到python命令行&lt;img src="https://hebohang.github.io/p/worldpartition%E8%A7%A3%E6%9E%90/image-9.png"
width="685"
height="56"
loading="lazy"
class="gallery-image"
data-flex-grow="1223"
data-flex-basis="2935px"
>&lt;/li>
&lt;li>运行指令 &lt;code>print(unreal.get_editor_subsystem(unreal.EditorActorSubsystem).get_selected_level_actors()[0].get_editor_property(&amp;quot;actor_guid&amp;quot;).to_string())&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/675514420" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/675514420&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/610772419" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/610772419&lt;/a>&lt;/p></description></item><item><title>WorldPartition</title><link>https://hebohang.github.io/p/worldpartition/</link><pubDate>Mon, 05 Feb 2024 18:14:13 +0800</pubDate><guid>https://hebohang.github.io/p/worldpartition/</guid><description>&lt;h2 id="world-partition">World Partition&lt;/h2>
&lt;p>官方文档：&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.0/zh-CN/world-partition-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.0/zh-CN/world-partition-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>主要是服务于大世界，提供了自动数据管理和基于距离进行加载的关卡流送系统。每个关卡分为是不是 World Partition（下称为WP）的版本，我们可以通过：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UWorld&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">World&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GEditor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetEditorWorldContext&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">World&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">World&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IsPartitionedWorld&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>来判断。&lt;/p>
&lt;h3 id="非wp关卡转换为wp关卡">非WP关卡转换为WP关卡&lt;/h3>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition/image-1.png"
width="430"
height="943"
loading="lazy"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="109px"
>&lt;/p>
&lt;h3 id="landscapespline">LandscapeSpline&lt;/h3>
&lt;p>LandscapeSpline与World Partition相关。&lt;/p>
&lt;p>核心函数：
LandscapeEdModeSplineTools.cpp：
BeginTool、AddControlPoint、AddSegment&lt;/p>
&lt;p>WorldPartition中，特殊的 ALandscapeSplineActor 的Owner是空的，他是通过 LandscapeGuid 和 LandscapeActor 附着到一个 ALandscape 上的。Outer是这个UWorld.&lt;/p>
&lt;p>非 WP 版本，是全部塞到一个 ALandscapeProxy 里面，一个 landscap e有一个 ALandscapeProxy，ALandscapeProxy 里面挂有 ULandscapeSplinesComponent，ULandscapeSplinesComponent， 里面有Segment数组和Control Point数组；&lt;/p>
&lt;p>WP版本则是每个landscape可以挂上多个 ALandscapeSplineActor，每个 ALandscapeSplineActor 里面挂有 ULandscapeSplinesComponent。&lt;/p>
&lt;h3 id="wp-hlod">WP-HLOD&lt;/h3>
&lt;p>还不太清楚 WP 版本的 HLOD 和正常的有什么区别，文档：
&lt;a class="link" href="https://docs.unrealengine.com/5.0/zh-CN/world-partition---hierarchical-level-of-detail-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.0/zh-CN/world-partition---hierarchical-level-of-detail-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h3 id="ofpa-one-file-per-actor">OFPA (One File Per Actor)&lt;/h3>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/502063482" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/502063482&lt;/a>&lt;/p>
&lt;p>World Partition下默认开启，非 WP 关卡可以在这里打开：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition/image-14.png"
width="1646"
height="899"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="439px"
>&lt;/p>
&lt;p>蛋疼的事：无法对一个 OFPA 的 Actor 在编辑器下（连接了版本管理）直接更新。&lt;/p>
&lt;h3 id="grid-cell">Grid Cell&lt;/h3>
&lt;p>Runtime Grid 运行时网格，相当于对整个世界划分为一个个格子，每个格子就是 cell，通过 cell size 来控制。&lt;/p>
&lt;p>可以对每个关卡中的物体的detail面板中编辑 World Partition 属性，写上对应属于的Grid的名字。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/BV1ik4y1A77p/?spm_id_from=333.337.top_right_bar_window_history.content.click&amp;amp;vd_source=bd08f0c74da1940eb8682f61aa471b24" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1ik4y1A77p/?spm_id_from=333.337.top_right_bar_window_history.content.click&amp;vd_source=bd08f0c74da1940eb8682f61aa471b24&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/537589944" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/537589944&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/502053365" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/502053365&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/675514420" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/675514420&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/610772419" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/610772419&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/541239006" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/541239006&lt;/a>&lt;/p>
&lt;h3 id="level-instance">Level Instance&lt;/h3>
&lt;p>每个 Level Instance 也有对应的 WorldSettings（对应 WorldSettings 面板，我们可以打开一个 Level Instance 序列化下来的 Level 来编辑），里头又有对应的 World Partition。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/level-instancing-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/level-instancing-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/502068030" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/502068030&lt;/a>&lt;/p>
&lt;h2 id="debug">Debug&lt;/h2>
&lt;h3 id="demp大世界场景信息">Demp大世界场景信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wp.Editor.DumpStreamingGenerationLog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5.3版本可以使用这个命令，输出一次WP的信息（也可以运行一次游戏或者cook的时候），输出结果会在 Saved\Logs\WorldPartition 里。&lt;/p>
&lt;h3 id="grid调试">Grid调试&lt;/h3>
&lt;p>&lt;img src="https://hebohang.github.io/p/worldpartition/image-15.png"
width="1717"
height="774"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/world-partition-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/world-partition-in-unreal-engine/&lt;/a>&lt;/p></description></item><item><title>UE-VS2022</title><link>https://hebohang.github.io/p/ue-vs2022/</link><pubDate>Wed, 17 Jan 2024 19:17:46 +0800</pubDate><guid>https://hebohang.github.io/p/ue-vs2022/</guid><description>&lt;h2 id="调试">调试&lt;/h2>
&lt;h3 id="条件断点">条件断点&lt;/h3>
&lt;h4 id="fstring">FString&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">wcsstr&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">wchar_t&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">MyString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AllocatorInstance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;MyText&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="fname">FName&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">strstr&lt;/span>&lt;span class="p">(((&lt;/span>&lt;span class="n">FNameEntry&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">GNameBlocksDebug&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MyFName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DisplayIndex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">FNameDebugVisualizer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">OffsetBits&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">FNameDebugVisualizer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">EntryStride&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">MyFName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DisplayIndex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Value&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">FNameDebugVisualizer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">OffsetMask&lt;/span>&lt;span class="p">)]).&lt;/span>&lt;span class="n">AnsiName&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;Search substring&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="unrealvs">UnrealVS&lt;/h3>
&lt;p>这是 UE 制作的插件，有很好的功能。&lt;/p>
&lt;p>在 Engine\Extras\UnrealVS\VS2022\UnrealVS.vsix 中，双击安装即可。&lt;/p>
&lt;p>之后对上面状态栏右键，可以扩展出 UnrealVS 处：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image-2.png"
width="414"
height="641"
loading="lazy"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="155px"
>&lt;/p>
&lt;p>然后就能很方便地加启动参数了：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image-3.png"
width="1607"
height="899"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;h3 id="dmp文件">dmp文件&lt;/h3>
&lt;p>直接拖入VS中:&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image.png"
width="1600"
height="748"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="513px"
>&lt;/p>
&lt;p>这里要注意，我们需要加载 pdb 文件才能调试，可以在设置符号路径处设置，我们这里可以填服务器路径（例如我们项目就是会把 pdb 都上传到一个地址，只需要填 \xxx.xxx.xxx\xxx 之类的地址就行），
服务器路径这个选项要打开：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image-1.png"
width="744"
height="487"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;h2 id="配制">配制&lt;/h2>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image-4.png"
width="870"
height="697"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image-5.png"
width="1245"
height="795"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;h2 id="bug">bug&lt;/h2>
&lt;h3 id="代码高亮错误">代码高亮错误&lt;/h3>
&lt;p>表现为一堆报红线，网上有两种解决方法，参考：
&lt;a class="link" href="https://forums.unrealengine.com/t/ue-5-1-visualstudio-2022-intellisense-for-engine-files-not-working-in-ue5/551166/19" target="_blank" rel="noopener"
>https://forums.unrealengine.com/t/ue-5-1-visualstudio-2022-intellisense-for-engine-files-not-working-in-ue5/551166/19&lt;/a>&lt;/p>
&lt;p>方法一：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue-vs2022/image-6.png"
width="628"
height="123"
loading="lazy"
class="gallery-image"
data-flex-grow="510"
data-flex-basis="1225px"
>&lt;/p>
&lt;p>方法二：
运行 GenerateProjectFiles.bat 加上 -Engine 参数： &lt;code>.\GenerateProjectFiles.bat -Engine&lt;/code>&lt;/p>
&lt;p>我最后方法一不行试的方法二成功。&lt;/p>
&lt;p>方法三：
某个模块改坏了，导致一直红线。这时候改一下对应的 .Build.cs（随便改然后撤回就行，目的是触发重新检测环境），然后重新 GenerateProjectFiles&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/BV1iQ4y1j73A/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;amp;vd_source=bd08f0c74da1940eb8682f61aa471b24" target="_blank" rel="noopener"
>[UFSH2023]总有一个你不知道的虚幻引擎调试技巧 | 陈拓 Epic Games&lt;/a>&lt;/p></description></item><item><title>杂项</title><link>https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/</link><pubDate>Fri, 01 Dec 2023 15:01:20 +0800</pubDate><guid>https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/</guid><description>&lt;h2 id="一些小方法">一些小方法&lt;/h2>
&lt;p>&lt;a class="link" href="https://hebohang.github.io/p/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%96%B9%E6%B3%95/" >一些小方法&lt;/a>&lt;/p>
&lt;h2 id="贴图设置属性">贴图设置属性&lt;/h2>
&lt;p>&lt;a class="link" href="https://hebohang.github.io/p/%E8%B4%B4%E5%9B%BE%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7/" >贴图设置属性&lt;/a>&lt;/p>
&lt;h2 id="referenceviewer">ReferenceViewer&lt;/h2>
&lt;p>&lt;a class="link" href="https://hebohang.github.io/p/referenceviewer/" >ReferenceViewer&lt;/a>&lt;/p>
&lt;h2 id="commandlet">Commandlet&lt;/h2>
&lt;p>&lt;a class="link" href="https://hebohang.github.io/p/commandlet/" >Commandlet&lt;/a>&lt;/p>
&lt;h2 id="保存资产">保存资产&lt;/h2>
&lt;p>&lt;a class="link" href="https://georgy.dev/posts/save-uobject-to-package/" target="_blank" rel="noopener"
>https://georgy.dev/posts/save-uobject-to-package/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">SaveToAsset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ObjectToSave&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPackage&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ObjectToSave&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetPackage&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">FString&lt;/span> &lt;span class="n">PackageName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Package&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetName&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">FString&lt;/span> &lt;span class="n">PackageFileName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LongPackageNameToFilename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetAssetPackageExtension&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FSavePackageArgs&lt;/span> &lt;span class="n">SaveArgs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This is specified just for example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SaveArgs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">TopLevelFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RF_Public&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">RF_Standalone&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SaveArgs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SaveFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SAVE_NoError&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">bSucceeded&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UPackage&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SavePackage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Package&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PackageFileName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SaveArgs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bSucceeded&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UE_LOG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LogTemp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Package &amp;#39;%s&amp;#39; wasn&amp;#39;t saved!&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UE_LOG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LogTemp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Warning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Package &amp;#39;%s&amp;#39; was successfully saved&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="http-请求">HTTP 请求&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">bHttpRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">RequestContent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TSharedRef&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TJsonWriter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TCHAR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TPrettyJsonPrintPolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TCHAR&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">JsonWriter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TJsonWriterFactory&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TCHAR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TPrettyJsonPrintPolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TCHAR&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;::&lt;/span>&lt;span class="n">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">RequestContent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">JsonWriter&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">WriteObjectStart&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">JsonWriter&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">WriteValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">JsonWriter&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">WriteObjectEnd&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">JsonWriter&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FHttpModule&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">HttpModule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FModuleManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LoadModuleChecked&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FHttpModule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TSharedRef&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IHttpRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ESPMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ThreadSafe&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">Request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HttpModule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">CreateRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetVerb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;POST&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetHeader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;application/json;charset=UTF-8&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xxxxxx&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetContentAsString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RequestContent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnProcessRequestComplete&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">BindLambda&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bHttpRequest&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="n">FHttpRequestPtr&lt;/span> &lt;span class="n">HttpRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FHttpResponsePtr&lt;/span> &lt;span class="n">HttpResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">bSucceeded&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bHttpRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bSucceeded&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do some thing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do some thing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ProcessRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">bHttpRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FHttpManager&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">HttpManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FHttpModule&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">GetHttpManager&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HttpManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Tick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FPlatformProcess&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意到，我们这里有一个 flag 标志位 bHttpRequest，是为了确保完成http请求再进行后续的操作（不放在回调里），此时需要使用 HttpManager.Tick&lt;/p>
&lt;p>参考：
&lt;a class="link" href="https://blog.csdn.net/qq_51654332/article/details/131489044" target="_blank" rel="noopener"
>https://blog.csdn.net/qq_51654332/article/details/131489044&lt;/a>&lt;/p>
&lt;h2 id="启动时debug">启动时debug&lt;/h2>
&lt;p>当我们打了一个游戏包，希望断点调试，可以先启动游戏，然后attach到这个进程：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-3.png"
width="339"
height="203"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>但是这样做游戏刚开始进行就无法调试到，我们可以增加参数 -WaitForDebugger：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-1.png"
width="406"
height="269"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="362px"
>&lt;/p>
&lt;p>（可以alt加鼠标左键拖动exe包，生成一个快捷方式，然后给快捷方式添加启动参数）&lt;/p>
&lt;p>此时会无事发生，点击刚刚的attach按钮会看到这个进程，接着会挂在这里(Engine\Source\Runtime\Launch\Private\Launch.cpp)：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-2.png"
width="1103"
height="300"
loading="lazy"
class="gallery-image"
data-flex-grow="367"
data-flex-basis="882px"
>&lt;/p>
&lt;p>点击continue继续就好了。&lt;/p>
&lt;h2 id="修改cpp不打包测试">修改cpp不打包测试&lt;/h2>
&lt;p>编辑器运行和打包后运行环境不太一样，走的engine loop的地方也有差别（编辑器下似乎是 UUnrealEdEngine::Tick，打包后是 UGameEngine::Tick），
因此有时候测试需要打包后测，但是若是只改动部分cpp就要重新打个包会很漫长。&lt;/p>
&lt;p>我们可以把配置改为 Development，然后编译项目（只需编译游戏项目就可以了），编译后在 Binaries\Win64 下，我们把编译后的游戏 exe 拷贝覆盖之前
打的游戏包（这里只替换exe就行）。但是注意，直接运行 Development 是不可以的，因为相对路径不太一样。&lt;/p>
&lt;h2 id="console-variable">Console Variable&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/console-varaibles-cplusplus-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/console-varaibles-cplusplus-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>项目打开了 r.GenerateMeshDistanceFields，导致Static Mesh资源检查时都会生成一遍Distance Field，比较耗时，我们在编辑器下 console 里输入 &lt;code>r.GenerateMeshDistanceFields 1&lt;/code>，可以发现是只读的：
&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-4.png"
width="360"
height="35"
loading="lazy"
class="gallery-image"
data-flex-grow="1028"
data-flex-basis="2468px"
>&lt;/p>
&lt;p>是因为这个变量有这个flag：
&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-5.png"
width="740"
height="339"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="523px"
>&lt;/p>
&lt;p>这样写也是报这个read only的错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">Final&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;r.GenerateMeshDistanceFields 0&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GEngine&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GetWorld&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Final&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是根据注释我们仍然可以C++中更改：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UConsoleVariablesEditorFunctionLibrary&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SetConsoleVariableByName_Bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;r.GenerateMeshDistanceFields&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是commandlet下仍然报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">LogConsoleVariablesEditor: Error: UConsoleVariablesEditorFunctionLibrary::SetConsoleVariableByName_String: FConsoleVariablesEditorCommandInfo was not foundwith given name: r.GenerateMeshDistanceFields.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 RenderSettings.h 中，该变量如下：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-6.png"
width="2118"
height="131"
loading="lazy"
class="gallery-image"
data-flex-grow="1616"
data-flex-basis="3880px"
>&lt;/p>
&lt;p>read only 属性则对应在这：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image-7.png"
width="1467"
height="269"
loading="lazy"
class="gallery-image"
data-flex-grow="545"
data-flex-basis="1308px"
>&lt;/p>
&lt;p>可以改成 ECVF_Default 来作用。&lt;/p>
&lt;h2 id="问题合集">问题合集&lt;/h2>
&lt;h3 id="fatal-error-c1083-cannot-open-compiler-generated-file">fatal error C1083: Cannot open compiler generated file&lt;/h3>
&lt;p>主要是打包的时候出现的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">fatal error C1083: Cannot open compiler generated file: &lt;span class="s1">&amp;#39;xxxx&amp;#39;&lt;/span>: Permission denied
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后发现是这个 xxxx 文件是只读的，右键属性把只读勾掉就行。&lt;/p>
&lt;h3 id="asset-cannot-be-saved-as-it-has-only-been-partially-loaded">Asset cannot be saved as it has only been partially loaded&lt;/h3>
&lt;p>根据&lt;a class="link" href="https://answers.unrealengine.com/questions/56362/cant-save-asset-as-unreal-only-partially-loaded-it.html" target="_blank" rel="noopener"
>UE4AnserHub&lt;/a>的今年6月最新的回答，已经解决。&lt;/p>
&lt;p>方法：修改文件命名即可。&lt;/p>
&lt;h3 id="缺失-xinput1_3dll">缺失 XInput1_3.dll&lt;/h3>
&lt;p>运行 Engine\Extras\Redist\en-us\UEPrereqSetup_x64.exe 下载安装依赖项。&lt;/p>
&lt;h3 id="udp日志过多">udp日志过多&lt;/h3>
&lt;p>log里全是这样的日志：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">LogUdpMessaging: Warning: FUdpMessageProcessor::UpdateReassemblers Discarding 2/4 of stale message segements from &lt;span class="nv">Sender&lt;/span>&lt;span class="o">=&lt;/span>xxx, &lt;span class="nv">Sequence&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关闭这个插件就行：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E6%9D%82%E9%A1%B9/image.png"
width="690"
height="195"
loading="lazy"
class="gallery-image"
data-flex-grow="353"
data-flex-basis="849px"
>&lt;/p>
&lt;h3 id="页面文件太小">页面文件太小&lt;/h3>
&lt;p>&lt;a class="link" href="https://ue5wiki.com/wiki/5cc4f8a/" target="_blank" rel="noopener"
>https://ue5wiki.com/wiki/5cc4f8a/&lt;/a>&lt;/p>
&lt;h3 id="材质回退到默认方格块">材质回退到默认方格块&lt;/h3>
&lt;p>打开关卡会对 map 进行检测，注意看消息日志。&lt;/p>
&lt;p>我这里是出现某个材质需要勾选 bUsedWithStaticLighting 的选项，勾了就好了。&lt;/p>
&lt;h3 id="libcurl-info-message-cache">libcurl info message cache&lt;/h3>
&lt;p>log 中总弹这些内容，可以在编辑器偏好中选择不发送给 UE：&lt;/p>
&lt;p>Go to Edit -&amp;gt; Editor Preferences -&amp;gt; Search for “Usage Data” -&amp;gt; select Don’t Send option&lt;/p>
&lt;p>参考：
&lt;a class="link" href="https://forums.unrealengine.com/t/what-is-my-editor-trying-to-do/76707/21" target="_blank" rel="noopener"
>https://forums.unrealengine.com/t/what-is-my-editor-trying-to-do/76707/21&lt;/a>&lt;/p>
&lt;h3 id="合集">合集&lt;/h3>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/80809567" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/80809567&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/en-US/map-check-errors-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/en-US/map-check-errors-in-unreal-engine/&lt;/a>&lt;/p></description></item><item><title>Cook</title><link>https://hebohang.github.io/p/cook/</link><pubDate>Mon, 27 Nov 2023 19:38:35 +0800</pubDate><guid>https://hebohang.github.io/p/cook/</guid><description>&lt;h2 id="cook-流程">Cook 流程&lt;/h2>
&lt;p>会执行到 UCookCommandlet 的 main 中：
&lt;code>Source\Editor\UnrealEd\Private\Commandlets\CookCommandlet.cpp&lt;/code>&lt;/p>
&lt;p>参考：
&lt;a class="link" href="https://rootjhon.github.io/posts/%E8%B5%84%E6%BA%90Cook%E6%9E%84%E5%BB%BA/" target="_blank" rel="noopener"
>https://rootjhon.github.io/posts/%E8%B5%84%E6%BA%90Cook%E6%9E%84%E5%BB%BA/&lt;/a>&lt;/p>
&lt;h2 id="cook-content">Cook Content&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/cooking-content-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/cooking-content-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/build-operations-cooking-packaging-deploying-and-running-projects-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/build-operations-cooking-packaging-deploying-and-running-projects-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h3 id="命令行启动">命令行启动&lt;/h3>
&lt;p>测试命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl"> .&lt;span class="se">\U&lt;/span>nrealEditor-Cmd.exe E:&lt;span class="se">\W&lt;/span>ork&lt;span class="se">\x&lt;/span>xx&lt;span class="se">\x&lt;/span>xx.uproject -run&lt;span class="o">=&lt;/span>cook -targetplatform&lt;span class="o">=&lt;/span>Windows -map&lt;span class="o">=&lt;/span>TestMap.umap
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 .\ 一定需要，目录在项目路径的 Engine\Binaries\Win64 中；但是 -map 我测试没有起作用，还有待考察。&lt;/p>
&lt;p>测完会放在项目目录的 &lt;code>Saved\Cooked\Windows\&lt;/code> 中。&lt;/p>
&lt;h3 id="编辑器与ide下启动">编辑器与IDE下启动&lt;/h3>
&lt;p>编辑器下，我们可以点击cook：
&lt;img src="https://hebohang.github.io/p/cook/image.png"
width="1189"
height="413"
loading="lazy"
class="gallery-image"
data-flex-grow="287"
data-flex-basis="690px"
>&lt;/p>
&lt;p>此时 Output Log 会有对应 Commandlet（这里的 xxx 是你的项目路径）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">E:&lt;span class="se">\W&lt;/span>ork&lt;span class="se">\x&lt;/span>xx&lt;span class="se">\E&lt;/span>ngine&lt;span class="se">\B&lt;/span>inaries&lt;span class="se">\W&lt;/span>in64&lt;span class="se">\U&lt;/span>nrealEditor-Cmd.exe E:&lt;span class="se">\W&lt;/span>ork&lt;span class="se">\x&lt;/span>xxxxxx&lt;span class="se">\C&lt;/span>7.uproject -run&lt;span class="o">=&lt;/span>Cook -TargetPlatform&lt;span class="o">=&lt;/span>Windows -unversioned -fileopenlog -abslog&lt;span class="o">=&lt;/span>E:&lt;span class="se">\W&lt;/span>ork&lt;span class="se">\x&lt;/span>xx&lt;span class="se">\E&lt;/span>ngine&lt;span class="se">\P&lt;/span>rograms&lt;span class="se">\A&lt;/span>utomationTool&lt;span class="se">\S&lt;/span>aved&lt;span class="se">\C&lt;/span>ook-2023.11.28-15.04.02.txt -stdout -CrashForUAT -unattended -NoLogTimes -UTF8Output
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以把对应参数填入 UE5 项目参数中进行调试：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/cook/image-2.png"
width="1257"
height="277"
loading="lazy"
class="gallery-image"
data-flex-grow="453"
data-flex-basis="1089px"
>&lt;/p>
&lt;p>此时对于贴图的 Cook 的调用栈为：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/cook/image-1.png"
width="1071"
height="469"
loading="lazy"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>可能的分支：
&lt;img src="https://hebohang.github.io/p/cook/image-3.png"
width="1014"
height="197"
loading="lazy"
class="gallery-image"
data-flex-grow="514"
data-flex-basis="1235px"
>&lt;/p></description></item><item><title>版本控制</title><link>https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><pubDate>Wed, 22 Nov 2023 20:22:04 +0800</pubDate><guid>https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid><description>&lt;h2 id="选择">选择&lt;/h2>
&lt;p>UE的官方源码是用git管理的：
&lt;a class="link" href="https://github.com/EpicGames/UnrealEngine" target="_blank" rel="noopener"
>https://github.com/EpicGames/UnrealEngine&lt;/a>&lt;/p>
&lt;p>不过项目管理他们更推荐P4（Perforce）&lt;/p>
&lt;p>P4 对于代码文本的管理有些蛋疼，很多项目喜欢混合 git、svn、perforce 使用。&lt;/p>
&lt;h2 id="编辑器">编辑器&lt;/h2>
&lt;p>编辑器右下角就有 Source Control 一栏，连上版本控制后我们可以进行 提交、revert 等功能。
点开设置可以进行连接选项的填写：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image.png"
width="482"
height="346"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;h2 id="源码">源码&lt;/h2>
&lt;p>由于有这么多种版本控制，ue 统一抽出了接口，位于：
&lt;code>Engine\Source\Developer\SourceControl&lt;/code>，可以重点观察 &lt;code>Engine/Source/Developer/SourceControl/Public/ISourceControlProvider.h&lt;/code>&lt;/p>
&lt;p>例如 P4 则是实现这一接口：
&lt;code>Engine/Plugins/Developer/PerforceSourceControl/Source/PerforceSourceControl/Private/PerforceSourceControlProvider.h&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-1.png"
width="1674"
height="623"
loading="lazy"
alt="UE的版本控制插件"
class="gallery-image"
data-flex-grow="268"
data-flex-basis="644px"
>&lt;/p>
&lt;h2 id="问题perforce">问题（Perforce）&lt;/h2>
&lt;h3 id="submit-content-时会导致有的文件状态被改为问号notindepot">Submit Content 时会导致有的文件状态被改为问号（NotInDepot）&lt;/h3>
&lt;p>ue有几次缓存，首先会调用 p4 fstat 命令获取各个文件夹内资产的状态，先记录在中间变量 Records 中（位于文件 PerforceSourceControlOperations.cpp）：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-2.png"
width="1238"
height="296"
loading="lazy"
class="gallery-image"
data-flex-grow="418"
data-flex-basis="1003px"
>&lt;/p>
&lt;p>接着在 ParseUpdateStatusResults 函数中对这个 Records 做处理，根据各个文件的状态，缓存到 OutStates 中（&lt;code>TArray&amp;lt;FPerforceSourceControlState&amp;gt;&lt;/code>类型）：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-3.png"
width="445"
height="65"
loading="lazy"
class="gallery-image"
data-flex-grow="684"
data-flex-basis="1643px"
>&lt;/p>
&lt;p>对于之前在p4服务器被delete的文件（HeadAction 是 delete），会把状态标记为 NotInDepot：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-4.png"
width="666"
height="91"
loading="lazy"
class="gallery-image"
data-flex-grow="731"
data-flex-basis="1756px"
>&lt;/p>
&lt;p>这样做的原因是，不允许再次存在相同文件的 move/delete 操作，很合理&amp;hellip;&lt;/p>
&lt;p>在处理执行的类文件 PerforceSourceControlProvider.cpp 中，有 GetStateInternal 函数获取文件状态，此时会做一级缓存，存到 StateCache，这是一个文件路径名到 FPerforceSourceControlState 的一个映射，
可以对每次查询状态进行加速，很合理：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FString&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TSharedRef&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">FPerforceSourceControlState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ESPMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ThreadSafe&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">StateCache&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们会在 GetStateInternal 函数中进行处理：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-6.png"
width="998"
height="247"
loading="lazy"
class="gallery-image"
data-flex-grow="404"
data-flex-basis="969px"
>&lt;/p>
&lt;p>更新的时候，我们会通过 GetStateInternal 函数得到 StateCache 中对应文件的状态，然后通过 OutStates 中已经拉取的状态去更新：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-8.png"
width="1082"
height="536"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;p>至此，看下来都没很合理。但是！我们项目组对一个小写文件改为大写文件，之前的小写文件删除上传p4. p4服务器是Linux环境，文件系统中Linux区分大小写，而Windows不分大小写。
p4此时就有这条delete的记录，在上述操作中就会缓存到ue里的 OutStates&lt;/p>
&lt;p>然后，我们在ue里查询这个大写文件的状态时，由于 StateCache 这个 TMap 默认是不区分大小写的，这就导致谁后进 map 就会把前面的状态覆盖。&lt;/p>
&lt;p>例如本地的这个大写文件状态是 checkout，然后提交查询状态时，map 中的状态又被小写文件的记录覆盖了，从而变成了 NotInDepot &amp;hellip;&lt;/p>
&lt;p>修复方法：把 StateCache 变成一个大小写敏感的 map，修改方法可以参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://hashnode.com/post/case-sensitive-tmaplessfstring-int32greater-in-unreal-engine-4-in-c-ckvc1jse20qf645s14e3d6ntd" target="_blank" rel="noopener"
>https://hashnode.com/post/case-sensitive-tmaplessfstring-int32greater-in-unreal-engine-4-in-c-ckvc1jse20qf645s14e3d6ntd&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TMap/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/TMap/&lt;/a>&lt;/p>
&lt;p>事实上也可以参考这个文件：Engine\Source\Runtime\Core\Private\Containers\ContainersTest.cpp&lt;/p>
&lt;p>其中有类 FCaseSensitiveLookupKeyFuncs ，参考他的写法即可&lt;/p></description></item><item><title>场景优化</title><link>https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 20 Nov 2023 17:27:45 +0800</pubDate><guid>https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/</guid><description>&lt;h2 id="ism-与-hism">ISM 与 HISM&lt;/h2>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image.png"
width="421"
height="395"
loading="lazy"
alt="继承链"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>ISM（Instanced Static Meshes）学过图形学的应该都不陌生，走的dc的api接口都有所区别。但是 ISM 需要所有的 Instance 都具有相同的 LOD，也就是说如果远处和近处都是用 ISM 一起渲染的，他们仍然要是一级LOD；
因此对于植被而言，通常覆盖范围较广，但是我们不可能远处和近处都用LOD0，因此又推出了 HISM（Hierarchical instanced static mesh），他把所有的 Instance 分簇，每一簇使用一级 LOD 层。&lt;/p>
&lt;p>因此 HISM 可能每一簇是一个 dc，虽然多了 dc 以及组织结构的管理消耗，但是剔除会更加方便。&lt;/p>
&lt;p>具体原理可以参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/58963258" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/58963258&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/441958089" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/441958089&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/443809005" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/443809005&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/42949773" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/42949773&lt;/a>&lt;/p>
&lt;p>参考：
&lt;a class="link" href="https://www.intel.com/content/www/us/en/developer/articles/training/unreal-engine-4-optimization-tutorial-part-2.html" target="_blank" rel="noopener"
>https://www.intel.com/content/www/us/en/developer/articles/training/unreal-engine-4-optimization-tutorial-part-2.html&lt;/a>&lt;/p>
&lt;h2 id="hlod">HLOD&lt;/h2>
&lt;p>官方文档：
&lt;a class="link" href="https://docs.unrealengine.com/5.0/zh-CN/hierarchical-level-of-detail-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.0/zh-CN/hierarchical-level-of-detail-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>针对静态Mesh资产的功能，当模型处于远距离时，分层细节级别（HLOD）系统可以将多个静态网格体Actor合并成单个代理网格体和材质。
生成代理网格体是需要花时间的步骤，并且每次编辑完场景时，左上角可能有需要重新构建HLOD代理网格体的提示（有点像灯光一样，也是有重新构建灯光的步骤）。&lt;/p>
&lt;h2 id="actor合并">Actor合并&lt;/h2>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-2.png"
width="573"
height="761"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>
一共有四种功能：Merge、Simplify、Batch、Approximate，每一种功能都可以在下面的 Merge Actors Settings 里面进行设置配置。&lt;/p>
&lt;p>官方文档：
&lt;a class="link" href="https://docs.unrealengine.com/5.0/zh-CN/merging-actors-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.0/zh-CN/merging-actors-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h3 id="相关代码">相关代码&lt;/h3>
&lt;p>UE 自带的这个合并功能，其中的 Batch 已经可以达到合批的功能了，其中注册到Editor的主要代码在：&lt;/p>
&lt;p>&lt;code>void FLevelEditorContextMenuImpl::FillMergeActorsMenu(UToolMenu* Menu)&lt;/code>;&lt;/p>
&lt;p>具体功能则是在 IMergeActorsTool 的接口 RunMergeFromSelection 中，可以参考做 Batch 的时候的调用栈：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-3.png"
width="1549"
height="266"
loading="lazy"
class="gallery-image"
data-flex-grow="582"
data-flex-basis="1397px"
>&lt;/p>
&lt;p>做 Batch 的核心函数位于 MeshMergeUtilities.cpp：&lt;code>FMeshMergeUtilities::MergeComponentsToInstances&lt;/code>&lt;/p>
&lt;p>bReplaceSourceActors 可以指定是否要把之前的Actor替换为合并后的模型；其中在 FMeshInstancingSettings 可以指定是否依赖 HLOD Volume，可以指定 ISMComponentToUse
（我们可以在这里换成 UHierarchicalInstancedStaticMeshComponent::StaticClass()），这个设置就和面板中的是对应起来的。&lt;/p>
&lt;p>最后这个 Batch 功能就可以做到：对于选中的所有 Static Mesh 的 Actor，若能合并（材质、Mesh相同）则合并为一个 HISM，一个 HLOD Volumn 内的要单独合成一个；并且
我们可以指定最小的应该合并的数量（FMeshInstancingSettings-InstanceReplacementThreshold），指定为5就需要有5个能合并的物体才会去合。&lt;/p>
&lt;h4 id="源码修改">源码修改&lt;/h4>
&lt;ol>
&lt;li>如果是HISM，则把HISM内的Instance给重新加入到合批中&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-8.png"
width="2124"
height="607"
loading="lazy"
class="gallery-image"
data-flex-grow="349"
data-flex-basis="839px"
>&lt;/p>
&lt;p>这里还把之前的注释掉了，因为我们之前的 HISM 的 Actor 类型就是一个 AActor，会与设置中最后合批的类型 ActorClassToUse 相同，我们不希望被跳过：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-9.png"
width="1028"
height="385"
loading="lazy"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="640px"
>&lt;/p>
&lt;ol start="2">
&lt;li>UE源码这里没有指定初始值，经过测试这里的 HLODVolume 可能会沿用之前的 HLODVolume 值，导致最后合批不严格按照 HLODVolume 划分。
我在这里补上了初始值。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-7.png"
width="1523"
height="513"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="712px"
>&lt;/p>
&lt;ol start="3">
&lt;li>组织方式修改：原来ue的功能会把所有不同的mesh都合成一个actor，一种mesh挂一个 ISM 或者 HISM，我们应该是希望一种mesh一个actor&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-11.png"
width="556"
height="373"
loading="lazy"
alt="UE默认的方式"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/p>
&lt;p>调试一下是这样的：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-13.png"
width="1160"
height="162"
loading="lazy"
class="gallery-image"
data-flex-grow="716"
data-flex-basis="1718px"
>&lt;/p>
&lt;p>核心代码在 FMeshMergeUtilities::MergeComponentsToInstances 的：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-12.png"
width="1081"
height="248"
loading="lazy"
class="gallery-image"
data-flex-grow="435"
data-flex-basis="1046px"
>&lt;/p>
&lt;p>我们这里把 MergedActor 从类 FActorEntry 转移到 FComponentEntry 中了，就完成了我们想要的效果。&lt;/p>
&lt;h3 id="补充说明">补充说明&lt;/h3>
&lt;p>可能会改到相关材质资产，比如增加flag bUsedWithInstancedStaticMeshes:&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-10.png"
width="1716"
height="76"
loading="lazy"
class="gallery-image"
data-flex-grow="2257"
data-flex-basis="5418px"
>&lt;/p>
&lt;h2 id="一键生成碰撞">一键生成碰撞&lt;/h2>
&lt;p>打开一个 Static Mesh 的资产，在 Collision 这里，如果有 Primitives，则是简单碰撞，一般美术自己编辑的碰撞信息
最后也会进这里面：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-4.png"
width="858"
height="708"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="290px"
>&lt;/p>
&lt;p>但是如果一个物体没有简单碰撞，UE 则会自动生成一个复杂碰撞（即三角面的碰撞体）：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-5.png"
width="533"
height="409"
loading="lazy"
alt="简单碰撞与复杂碰撞"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;p>这样太费了，我们希望做的是遍历场景所有 Mesh，检查是否有简单碰撞，若没有则自动生成。UE 是有自动生成接口的：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96/image-6.png"
width="992"
height="450"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="529px"
>&lt;/p>
&lt;p>我们希望生成的是 DOP 的或者 Convex 的。&lt;/p>
&lt;h3 id="相关代码-1">相关代码&lt;/h3>
&lt;p>对应的碰撞信息位于：&lt;code>StaticMesh-&amp;gt;GetBodySetup()-&amp;gt;AggGeom.GetElementCount()&lt;/code>&lt;/p></description></item><item><title>编辑器扩展</title><link>https://hebohang.github.io/p/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/</link><pubDate>Mon, 20 Nov 2023 15:28:35 +0800</pubDate><guid>https://hebohang.github.io/p/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/</guid><description>&lt;h2 id="contentbrowser-扩展">ContentBrowser 扩展&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UToolMenu&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Menu&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">UToolMenus&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExtendMenu&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ContentBrowser.AssetContextMenu.AssetActionsSubMenu&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FToolMenuSection&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Section&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Menu&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FindOrAddSection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;AssetContextAdvancedActions&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Section&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddMenuEntry&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;HbhTest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hbh Test Title&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hbh Test1&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hbh Test TooltipText&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hbh Test2&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FSlateIcon&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FToolMenuExecuteAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateLambda&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FToolMenuContext&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">InContext&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UContentBrowserAssetContextMenuContext&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">InContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FindContext&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UContentBrowserAssetContextMenuContext&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">Asset&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Context&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetSelectedObjects&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UE_LOG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LogTemp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Log&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Asset&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetPathName&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对资产右键，效果：
&lt;img src="https://hebohang.github.io/p/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/image.png"
width="585"
height="641"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;h2 id="弹窗">弹窗&lt;/h2>
&lt;p>自定义一个弹窗：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FName&lt;/span> &lt;span class="nf">TabName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Your Tab Name&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FGlobalTabmanager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">RegisterNomadTabSpawner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TabName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FOnSpawnTab&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateRaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">OnSpawnTab&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">SetDisplayName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">SetMenuType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ETabSpawnerMenuType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Hidden&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FGlobalTabmanager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">UnregisterNomadTabSpawner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TabName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FGlobalTabmanager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">TryInvokeTab&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TabName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TSharedRef&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SDockTab&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">OnSpawnTab&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">FSpawnTabArgs&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">SpawnTabArgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">SNew&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SDockTab&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">TabRole&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ETabRole&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">NomadTab&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SNew&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xxx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果只是想要一个弹出窗口显示信息，可以直接使用 FMessageDialog：&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/en-US/API/Runtime/Core/Misc/FMessageDialog/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/en-US/API/Runtime/Core/Misc/FMessageDialog/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/268069477" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/268069477&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FMessageDialog&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EAppMsgType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Ok&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NSLOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">int32&lt;/span> &lt;span class="n">Count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">Dialog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FString&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FMessageDialog&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EAppMsgType&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Ok&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FText&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FromString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Dialog&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://hebohang.github.io/p/%E7%BC%96%E8%BE%91%E5%99%A8%E6%89%A9%E5%B1%95/image-1.png"
width="205"
height="146"
loading="lazy"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;h2 id="进度条">进度条&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Misc/ScopedSlowTask.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FScopedSlowTask&lt;/span> &lt;span class="nf">SlowTask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Num&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">LOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;GeneratingDataText&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Generating Data&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">SlowTask&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MakeDialog&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">file&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SlowTask&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">EnterProgressFrame&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Implementation can be before or after
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://forums.unrealengine.com/t/how-can-i-use-unreal-engine-editors-progress-bar-not-umg/359876" target="_blank" rel="noopener"
>https://forums.unrealengine.com/t/how-can-i-use-unreal-engine-editors-progress-bar-not-umg/359876&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/en-US/API/Runtime/Core/Misc/FScopedSlowTask/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/en-US/API/Runtime/Core/Misc/FScopedSlowTask/&lt;/a>&lt;/p></description></item><item><title>UE基础知识</title><link>https://hebohang.github.io/p/ue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Fri, 17 Nov 2023 15:56:23 +0800</pubDate><guid>https://hebohang.github.io/p/ue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>&lt;h2 id="编译链接">编译链接&lt;/h2>
&lt;h3 id="源码编译">源码编译&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone -b 4.27.2-release --depth&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> git@github.com:EpicGames/UnrealEngine.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/107516361" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/107516361&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/EpicGames/UnrealEngine" target="_blank" rel="noopener"
>https://github.com/EpicGames/UnrealEngine&lt;/a>&lt;/p>
&lt;h3 id="ue模块类相关">UE模块、类相关&lt;/h3>
&lt;ul>
&lt;li>[YourModuleName]_API宏的作用?&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>放函数声明前用于暴露(导出)该函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>放类声明前用于暴露(导出)该类的所有内容&lt;/p>
&lt;p>特别注意：_API前面的内容&lt;strong>一定要大写&lt;/strong>！否则会编译不通过&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>MinimalAPI说明符的作用?&lt;/p>
&lt;p>暴露(导出)该类的类型信息让其它模块可以&lt;/p>
&lt;ol>
&lt;li>Cast到该类型&lt;/li>
&lt;li>继承该类型 (该类型的所有定义在.cpp文件的虚函数都需要导出)&lt;/li>
&lt;li>使用内联函数&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="编辑器">编辑器&lt;/h2>
&lt;h3 id="content-browser">Content Browser&lt;/h3>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.0/zh-CN/content-browser-interface-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.0/zh-CN/content-browser-interface-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>可以对一个文件夹右键 add to favorites 功能，可以显示 favorites：&lt;/p>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-3.png"
width="438"
height="526"
loading="lazy"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="199px"
>&lt;/p>
&lt;h3 id="关卡">关卡&lt;/h3>
&lt;h4 id="新建">新建&lt;/h4>
&lt;p>File -&amp;gt; New Level，头两个是 World Partition 的关卡。&lt;/p>
&lt;h2 id="ui">UI&lt;/h2>
&lt;p>&lt;img src="https://hebohang.github.io/p/ue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image.png"
width="429"
height="284"
loading="lazy"
alt="文本自动换行"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="362px"
>&lt;/p>
&lt;p>勾掉 auto wrap text，就可以控制自动换行的文本大小（有wrap控制的情况下？）。&lt;/p>
&lt;h2 id="资产">资产&lt;/h2>
&lt;h3 id="texture">Texture&lt;/h3>
&lt;h4 id="texture-stream-与-lod-bias">Texture Stream 与 LOD Bias&lt;/h4>
&lt;p>&lt;a class="link" href="https://polycount.com/discussion/200525/ue4-texture-settings-help-mip-gen-settings-lod-bias-power-of-two-mode" target="_blank" rel="noopener"
>https://polycount.com/discussion/200525/ue4-texture-settings-help-mip-gen-settings-lod-bias-power-of-two-mode&lt;/a>&lt;/p>
&lt;p>ue 的贴图可以勾选 Never Stream，此时会取消纹理流送；否则默认开启纹理流送。&lt;/p>
&lt;p>关闭纹理流送，就可以保证每次都加载贴图原生大小，保证最高分辨率，但是可能有性能影响，一般ui可以开。&lt;/p>
&lt;p>纹理流送首先加载最小的mipmap，然后逐渐增加；如果 LOD Bias 为0，则最后加载到原贴图最大版本为止；为1则为第一级。例如 2048 的贴图，LOD Bias 为1，则纹理流送到 1024 为止。&lt;/p>
&lt;h4 id="texture-group">Texture Group&lt;/h4>
&lt;p>纹理组，可以一起设置贴图的各种设置：默认压缩、mip生成、lod bias等等。&lt;/p>
&lt;h2 id="c">C++&lt;/h2>
&lt;h3 id="ue反射相关">ue反射相关&lt;/h3>
&lt;p>入门：
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/400473355" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/400473355&lt;/a>
&lt;a class="link" href="https://www.cnblogs.com/ghl_carmack/p/5701862.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/ghl_carmack/p/5701862.html&lt;/a>
&lt;a class="link" href="https://ikrima.dev/ue4guide/engine-programming/uobject-reflection/uobject-reflection/" target="_blank" rel="noopener"
>https://ikrima.dev/ue4guide/engine-programming/uobject-reflection/uobject-reflection/&lt;/a>&lt;/p>
&lt;h4 id="class-default-object-简称cdo">Class Default Object, 简称CDO&lt;/h4>
&lt;p>UCLASS宏为UObject提供了一个描述其基于虚幻的类型的UCLASS的引用。每个UCLASS都维护一个名为“类默认对象”的对象，简称CDO。&lt;/p>
&lt;p>CDO本质上是一个默认的“模板”对象，由类构造函数生成，之后未修改。可以为给定的Object实例检索UCLASS和CDO，尽管它们通常应该被认为是只读的。可以使用GetClass()函数随时访问Object实例的UCLASS。&lt;/p>
&lt;p>CDO是在引擎初始化时创建的，当引擎为每个类生成UClass对象时。每个UClass的实例都是在引擎初始化期间创建的，并被分配为该UClass的CDO。并且包含在反射系统中，如在编辑器可以操作类蓝图。Obj.cpp可以看到引擎CDO初始化创建。&lt;/p>
&lt;p>因此一个 UClass* 是无法直接Cast转型成其他类型的，因为没有实例化；我们可以用 TSubclassOf 先转为其他类型，之后获取 CDO 得到默认对象（&lt;code>GetDefaultObject&amp;lt;xxx&amp;gt;&lt;/code>）再调用它的相关函数之类的。&lt;/p>
&lt;h4 id="获取uobject属性值">获取UObject属性值&lt;/h4>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/61042237" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/61042237&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取属性名为PropertyName的属性的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FName&lt;/span> &lt;span class="n">PropertyName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FProperty&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Property&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetClass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FindPropertyByName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PropertyName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Property&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ValuePtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Property&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ContainerPtrToValuePtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ValuePtr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FString&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Property&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ExportTextItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ValuePtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PPF_None&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UE_LOG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LogTemp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Log&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Property %s value is %s&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PropertyName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="标记宏">标记宏&lt;/h4>
&lt;p>可以使用UENUM()、UCLASS()、USTRUCT()、UFUNCTION()、UPROPERTY()来标记不同的类型和成员变量，标记也可以包含额外的描述关键字。&lt;/p>
&lt;p>每个描述的关键字（例如EditAnywhere或BlueprintCallable）都在ObjectMacros.h中有一个镜像，有一个简短的描述。当不知道一个关键字的意思时，可以去ObjectMacros.h中去查看&lt;/p>
&lt;p>更方便地是直接看文档：
&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/ufunctions-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/ufunctions-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h5 id="类说明符-uclass">类说明符 UCLASS&lt;/h5>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/class-specifiers/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/class-specifiers/&lt;/a>&lt;/p>
&lt;h5 id="蓝图-uparamref">蓝图 UPARAM(ref)&lt;/h5>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/exposing-gameplay-elements-to-blueprints-visual-scripting-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/exposing-gameplay-elements-to-blueprints-visual-scripting-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h4 id="with_editoronly_data-宏">WITH_EDITORONLY_DATA 宏&lt;/h4>
&lt;p>用 WITH_EDITOR 包裹反射属性会在非 Editor 时报错，这是因为 UHT 不会检测宏条件，导致这部分属性也被反射生成了；此时要用 WITH_EDITORONLY_DATA 宏，
UE 对这个宏做了特殊处理。&lt;/p>
&lt;p>&lt;a class="link" href="https://ue5wiki.com/wiki/41080/" target="_blank" rel="noopener"
>https://ue5wiki.com/wiki/41080/&lt;/a>&lt;/p>
&lt;h3 id="指针和引用">指针和引用&lt;/h3>
&lt;p>参考：
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/604213414" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/604213414&lt;/a>&lt;/p>
&lt;h4 id="类指针">类指针&lt;/h4>
&lt;p>UClass* 和 TSubClassOf&lt;T>&lt;/p>
&lt;h4 id="软引用和硬引用">软引用和硬引用&lt;/h4>
&lt;p>硬引用在资产加载时的逻辑：当A资产持有B资产的硬引用时，A资产被加载到内存中时，B资产也会被加载到内存中。&lt;/p>
&lt;p>软引用在资产加载时的逻辑：当A资产持有B资产的软引用是，A资产被加载到内存中时，B资产不会被加载。&lt;/p>
&lt;p>软引用本质上存的是资产的路径。&lt;/p>
&lt;p>软对象引用：&lt;code>TSoftObjectPtr&amp;lt;T&amp;gt; SoftObjRef;&lt;/code>&lt;/p>
&lt;p>软类引用：&lt;code>TSoftClassPtr&amp;lt;T&amp;gt; SoftClassRef;&lt;/code>&lt;/p>
&lt;p>因此软引用主要是用来做异步加载的，参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/asynchronous-asset-loading-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/asynchronous-asset-loading-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/referencing-assets-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/referencing-assets-in-unreal-engine/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/351106187" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/351106187&lt;/a>&lt;/p>
&lt;h5 id="源码分析">源码分析&lt;/h5>
&lt;p>看类：FSoftObjectPath&lt;/p>
&lt;p>有成员变量：
&lt;img src="https://hebohang.github.io/p/ue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-2.png"
width="936"
height="496"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="452px"
>&lt;/p>
&lt;p>看注释也知道他是指向一个 Level 中的 Object 的路径，因此持有软引用的时候加载并不会加载资产，可以用 &lt;code>IsPending()&lt;/code>
方法来判断是否可以访问。&lt;/p>
&lt;p>继承关系：TSoftObjectPtr 只是对 FSoftObjectPtr 的一个 Wrapper，FSoftObjectPtr 继承自 &lt;code>TPersistentObjectPtr&amp;lt;FSoftObjectPath&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="字符串处理">字符串处理&lt;/h3>
&lt;h4 id="fstringfnameftext互转">FString、FName、FText互转&lt;/h4>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.3/zh-CN/string-handling-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.3/zh-CN/string-handling-in-unreal-engine/&lt;/a>&lt;/p>
&lt;h5 id="enum-转-fstring">Enum 转 FString&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UEnum&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetValueAsString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">YourEnum&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">EnumValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://forums.unrealengine.com/t/conversion-of-enum-to-string/337869/26" target="_blank" rel="noopener"
>https://forums.unrealengine.com/t/conversion-of-enum-to-string/337869/26&lt;/a>&lt;/p>
&lt;h4 id="中文乱码">中文乱码&lt;/h4>
&lt;p>使用 UTF8_TO_TCHAR：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TextBlock&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">SetText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FText&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FromString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UTF8_TO_TCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;否&amp;#34;&lt;/span>&lt;span class="p">)));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="本地化">本地化&lt;/h4>
&lt;p>本地化主要是根据&lt;code>LOCTEXT&lt;/code>或者&lt;code>NSLOCTEXT&lt;/code>将这两个里面的&lt;code>LOCTEXT(“key”, “value”)&lt;/code>, 找到这个key，然后根据不同语言，将我们的Value替换掉&lt;/p>
&lt;p>添加namespace域，一方面为了过滤，一方面避免了key冲突。&lt;/p>
&lt;p>&lt;strong>LOCTEXT用法&lt;/strong>&lt;/p>
&lt;p>前后必须要加LOCTEXT_NAMESPACE 和LOCTEXT_NAMESPACE定义一个作用域，
代表下面的字符串都在这里作用域里头，引擎好通过这个域去搜索所有的LOCTEXT&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define LOCTEXT_NAMESPACE &amp;#34;SlateMain&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SMainSlate_ButtonSlateAnimation_Text3333&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;测试Slate动画&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#undef LOCTEXT_NAMESPACE
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>NSLOCTEXT用法&lt;/strong>&lt;/p>
&lt;p>不用加LOCTEXT_NAMESPACE 和LOCTEXT_NAMESPACE。但是三个参数，第一个也是作用域&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LOCTEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SlateMain&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SMainSlate_ButtonSlateAnimation_Text3333&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;测试Slate动画&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UE5在编辑器的 Tools-&amp;gt;Localization Dashboard 中配置：
&lt;img src="https://hebohang.github.io/p/ue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-1.png"
width="662"
height="371"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;h5 id="参考">参考：&lt;/h5>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/u011718663/article/details/117785611" target="_blank" rel="noopener"
>https://blog.csdn.net/u011718663/article/details/117785611&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://forums.unrealengine.com/t/define-loctext-namespace-something/438086" target="_blank" rel="noopener"
>https://forums.unrealengine.com/t/define-loctext-namespace-something/438086&lt;/a>&lt;/p>
&lt;h3 id="路径">路径&lt;/h3>
&lt;p>各种资源的路径格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">ObjectPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">Engine&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">EngineDamageTypes&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">DmgTypeBP_Environmental&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DmgTypeBP_Environmental&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">PackageName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">Engine&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">EngineDamageTypes&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">DmgTypeBP_Environmental&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">ObjectName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">DmgTypeBP_Environmental&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">Filename&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">..&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Engine&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Content&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">EngineDamageTypes&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">DmgTypeBP_Environmental&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">PackagePath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">Engine&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">EngineDamageTypes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">ShortName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">DmgTypeBP_Environmental&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">AssetName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">DmgTypeBP_Environmental&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">AssetPackageExtension&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">uasset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">MapPackageExtension&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">umap&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>路径转换函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">ObjectPath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/Engine/EngineDamageTypes/DmgTypeBP_Environmental.DmgTypeBP_Environmental&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">PackageName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ObjectPathToPackageName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ObjectPath&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">ObjectName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ObjectPathToObjectName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ObjectPath&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">Filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LongPackageNameToFilename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">PackageName2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FilenameToLongPackageName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Filename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">PackagePath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetLongPackagePath&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">ShortName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetLongPackageAssetName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">AssetName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetShortName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PackageName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">AssetPackageExtension&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetAssetPackageExtension&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FString&lt;/span> &lt;span class="n">MapPackageExtension&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FPackageName&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetMapPackageExtension&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>想得到 ObjectPath，我一直没发现好办法，但是从 PackageName 到 ObjectPath 可以先得到 FAssetData 过度：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TArray&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FAssetData&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">AssetDataArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AssetRegistryModule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">GetAssetsByPackageName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">AssetPackageName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AssetDataArray&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后再加载有两种方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ObjectPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AssetDataArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">GetSoftObjectPath&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">TryLoad&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UWorld&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">World&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoadObject&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UWorld&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">AssetDataArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">GetObjectPathString&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/152201635" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/152201635&lt;/a>&lt;/p>
&lt;h3 id="复制-duplicate">复制 Duplicate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. Duplicate Object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">YourType&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">NewObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DuplicateObject&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">YourType&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TObjectPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">SourceObject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">UObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Outer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FName&lt;/span> &lt;span class="n">Name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NAME_None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2. Duplicate Actor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UEditorActorSubsystem&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">EditorActorSubsystem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GEditor&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetEditorSubsystem&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UEditorActorSubsystem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">YourType&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">NewActor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">YourType&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EditorActorSubsystem&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">DuplicateActor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">YourActor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 3. Duplicate Asset
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">FAssetToolsModule&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">AssetToolsModule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FModuleManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">LoadModuleChecked&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FAssetToolsModule&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;AssetTools&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">NewAsset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AssetToolsModule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">DuplicateAsset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;NewAssetName&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;NewAssetPath&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">YourAsset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="slate专栏">Slate专栏&lt;/h3>
&lt;h4 id="快速入门指南">快速入门指南&lt;/h4>
&lt;p>官方教程：
&lt;a class="link" href="https://docs.unrealengine.com/5.0/zh-CN/slate-editor-window-quickstart-guide-for-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.0/zh-CN/slate-editor-window-quickstart-guide-for-unreal-engine/&lt;/a>&lt;/p>
&lt;p>但是官方教程有一点错误，详细代码可以看：
&lt;a class="link" href="https://github.com/yegorsw/UE_SimpleSlatePlugin/tree/main" target="_blank" rel="noopener"
>https://github.com/yegorsw/UE_SimpleSlatePlugin/tree/main&lt;/a>&lt;/p>
&lt;h4 id="细节面板自定义">细节面板自定义&lt;/h4>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/463008792" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/463008792&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://imzlp.com/posts/26919/" target="_blank" rel="noopener"
>https://imzlp.com/posts/26919/&lt;/a>&lt;/p>
&lt;p>其中若是对TArray类型自定义，我是参考的ue源代码，参考链接：
&lt;a class="link" href="https://forums.unrealengine.com/t/how-to-use-ipropertytypecustomization-to-display-tarray/414634/7" target="_blank" rel="noopener"
>https://forums.unrealengine.com/t/how-to-use-ipropertytypecustomization-to-display-tarray/414634/7&lt;/a>&lt;/p>
&lt;p>最后翻看ue代码：FSpriteDetailsCustomization::BuildTextureSection&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TSharedRef&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FDetailArrayBuilder&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">PropertyValuesBuilder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MakeShareable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">FDetailArrayBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PropertyValuesHandle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToSharedRef&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PropertyValuesBuilder&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OnGenerateArrayElementWidget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FOnGenerateArrayElementWidget&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CreateSP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">FKCustomPropertyDetails&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GeneratePropertyValueWidget&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StructBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddCustomBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PropertyValuesBuilder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="关闭代码文件优化">关闭代码文件优化&lt;/h3>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/563164847" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/563164847&lt;/a>
可以按vs的方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma optimize(&amp;#34;&amp;#34;, off)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma optimize(&amp;#34;&amp;#34;, on)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="配置文件">配置文件&lt;/h3>
&lt;p>&lt;a class="link" href="https://docs.unrealengine.com/5.2/zh-CN/configuration-files-in-unreal-engine/" target="_blank" rel="noopener"
>https://docs.unrealengine.com/5.2/zh-CN/configuration-files-in-unreal-engine/&lt;/a>&lt;/p></description></item></channel></rss>